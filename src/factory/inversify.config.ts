import { Container } from 'inversify';
import { REPOSITORY_SYMBOLS } from '../repositoryTypes/repositorySymbols';
import { SERVICE_SYMBOLS } from '../serviceTypes/serviceSymbols';
import { IFamilyRepository } from 'repositoryTypes/IFamilyRepository';
import FamilyRepository from 'repository/familyRepository';
import { IUsersService } from 'serviceTypes/IUsersService';
import UsersRepository from 'repository/usersRepository';
import { IUsersRepository } from 'repositoryTypes/IUsersRepository';
import IAuthService from 'serviceTypes/IAuthService';
import { IEmailService } from 'serviceTypes/IEmailService';
import { IFamilyService } from 'serviceTypes/IFamilyService';
import FamilyService from 'services/FamilyService';
import { ICategoriesService } from 'serviceTypes/ICategoriesService';
import CategoriesService from 'services/CategoriesService';
import { ICategoryRepository } from 'repositoryTypes/ICategoriesRepository';
import CategoriesRepository from 'repository/categoriesRepository';
import { IExpensesRepository } from 'repositoryTypes/IExpensesRepository';
import ExpensesRepository from 'repository/expensesRepository';
import ExpensesService from 'services/ExpensesService';
import { IExpensesService } from 'serviceTypes/IExpensesService';
import MQEmailService from 'services/MQEmailService';
import IncomesRepository from 'repository/incomesRepository';
import { IIncomesService } from 'serviceTypes/IIncomesService';
import IncomesService from 'services/IncomesService';
import { ISubscriptionsService } from 'serviceTypes/ISubscriptionsService';
import SubscriptionsService from 'services/SubscriptionsService';
import ISubscriptionsRepository from 'repositoryTypes/ISubscriptionsrepository';
import SubscriptionsRepository from 'repository/subscriptionsRepository';
import BalancesService from 'services/BalancesService';
import { IBalancesService } from 'serviceTypes/IBalancesService';
import MsUsersService from 'services/MSUsersService';
import MsAuthService from 'services/MsAuthService';

const myContainer = new Container();
myContainer.bind<IFamilyRepository>(REPOSITORY_SYMBOLS.IFamilyRepository).to(FamilyRepository);
myContainer.bind<IUsersRepository>(REPOSITORY_SYMBOLS.IUsersRepository).to(UsersRepository);
myContainer.bind<ICategoryRepository>(REPOSITORY_SYMBOLS.ICategoriesRepository).to(CategoriesRepository);
myContainer.bind<IExpensesRepository>(REPOSITORY_SYMBOLS.IExpensesRepository).to(ExpensesRepository);
myContainer.bind<IncomesRepository>(REPOSITORY_SYMBOLS.IIncomesRepository).to(IncomesRepository);
myContainer.bind<ISubscriptionsRepository>(REPOSITORY_SYMBOLS.ISubscriptionsRepository).to(SubscriptionsRepository);

myContainer.bind<IUsersService>(SERVICE_SYMBOLS.IUsersService).to(MsUsersService);
myContainer.bind<IAuthService>(SERVICE_SYMBOLS.IAuthService).to(MsAuthService);
myContainer.bind<IEmailService>(SERVICE_SYMBOLS.IEmailService).to(MQEmailService);
myContainer.bind<IFamilyService>(SERVICE_SYMBOLS.IFamilyService).to(FamilyService);
myContainer.bind<IExpensesService>(SERVICE_SYMBOLS.IExpensesService).to(ExpensesService);
myContainer.bind<IIncomesService>(SERVICE_SYMBOLS.IIncomesService).to(IncomesService);
myContainer.bind<ICategoriesService>(SERVICE_SYMBOLS.ICategoriesService).to(CategoriesService);
myContainer.bind<ISubscriptionsService>(SERVICE_SYMBOLS.ISubscriptionsService).to(SubscriptionsService);
myContainer.bind<IBalancesService>(SERVICE_SYMBOLS.IBalancesService).to(BalancesService);

export default myContainer;
